import { jsPDF } from 'jspdf'
import autoTable from 'jspdf-autotable'

export const generateAnalysisReport = (analysis, userName = 'Student') => {
  const doc = new jsPDF()

  // Header with gradient effect
  doc.setFillColor(124, 58, 237)
  doc.rect(0, 0, 210, 45, 'F')
  
  doc.setTextColor(255, 255, 255)
  doc.setFontSize(32)
  doc.setFont('helvetica', 'bold')
  doc.text('VOXA AI', 105, 20, { align: 'center' })
  
  doc.setFontSize(16)
  doc.text('Dyslexia Handwriting Analysis Report', 105, 32, { align: 'center' })

  // Report Info Box
  doc.setFillColor(243, 244, 246)
  doc.roundedRect(15, 55, 180, 35, 3, 3, 'F')
  
  doc.setTextColor(0, 0, 0)
  doc.setFontSize(12)
  doc.setFont('helvetica', 'bold')
  doc.text('Student Name:', 20, 65)
  doc.setFont('helvetica', 'normal')
  doc.text(userName, 60, 65)
  
  doc.setFont('helvetica', 'bold')
  doc.text('Age:', 20, 73)
  doc.setFont('helvetica', 'normal')
  doc.text(analysis.age ? `${analysis.age} years` : 'Not specified', 60, 73)
  
  doc.setFont('helvetica', 'bold')
  doc.text('Date:', 20, 81)
  doc.setFont('helvetica', 'normal')
  doc.text(new Date(analysis.createdAt).toLocaleDateString(), 60, 81)

  // Risk Assessment Section
  doc.setFontSize(18)
  doc.setFont('helvetica', 'bold')
  doc.text('Risk Assessment', 20, 105)

  const riskColor = analysis.riskLevel === 'High' ? [220, 38, 38] :
                    analysis.riskLevel === 'Medium' ? [234, 179, 8] : [34, 197, 94]
  
  doc.setFillColor(...riskColor)
  doc.roundedRect(20, 110, 170, 25, 3, 3, 'F')
  
  doc.setTextColor(255, 255, 255)
  doc.setFontSize(20)
  doc.text(
    `${analysis.riskLevel} Risk - ${Math.round(analysis.confidence * 100)}% Confidence`,
    105, 
    125, 
    { align: 'center' }
  )

  // Detailed Metrics Table
  doc.setTextColor(0, 0, 0)
  doc.setFontSize(16)
  doc.setFont('helvetica', 'bold')
  doc.text('Detailed Metrics', 20, 150)

  const metricsData = [
    ['Letter Reversals', `${analysis.detailedMetrics.letterReversals}%`],
    ['Spacing Issues', `${analysis.detailedMetrics.spacingIssues}%`],
    ['Formation Issues', `${analysis.detailedMetrics.formationIssues}%`],
    ['Pressure Variation', `${analysis.detailedMetrics.pressureVariation}%`],
    ['Baseline Alignment', `${analysis.detailedMetrics.baselineAlignment}%`]
  ]

  // âœ… FIXED: Use autoTable correctly
  autoTable(doc, {
    startY: 155,
    head: [['Metric', 'Score']],
    body: metricsData,
    theme: 'grid',
    headStyles: { fillColor: [124, 58, 237], fontSize: 12, fontStyle: 'bold' },
    styles: { fontSize: 11 }
  })

  // Indicators Section
  let yPos = doc.lastAutoTable.finalY + 15
  doc.setFontSize(16)
  doc.setFont('helvetica', 'bold')
  doc.text('Detected Indicators', 20, yPos)

  yPos += 8
  doc.setFontSize(11)
  doc.setFont('helvetica', 'normal')
  analysis.indicators.forEach((indicator, index) => {
    const lines = doc.splitTextToSize(`${index + 1}. ${indicator}`, 170)
    doc.text(lines, 25, yPos)
    yPos += lines.length * 6
    if (yPos > 270) {
      doc.addPage()
      yPos = 20
    }
  })

  // Recommendations Section
  if (yPos > 220) {
    doc.addPage()
    yPos = 20
  } else {
    yPos += 10
  }
  
  doc.setFontSize(16)
  doc.setFont('helvetica', 'bold')
  doc.text('Recommendations', 20, yPos)

  yPos += 8
  doc.setFontSize(11)
  doc.setFont('helvetica', 'normal')
  analysis.recommendations.forEach((rec, index) => {
    const lines = doc.splitTextToSize(`${index + 1}. ${rec}`, 170)
    doc.text(lines, 25, yPos)
    yPos += lines.length * 6
    if (yPos > 270) {
      doc.addPage()
      yPos = 20
    }
  })

  // Footer
  const pageCount = doc.internal.getNumberOfPages()
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i)
    doc.setFontSize(9)
    doc.setTextColor(128, 128, 128)
    doc.text(
      'Generated by VOXA AI - For Educational Purposes Only',
      105,
      285,
      { align: 'center' }
    )
    doc.text(
      'This is not a medical diagnosis. Consult a professional for formal assessment.',
      105,
      290,
      { align: 'center' }
    )
    doc.text(`Page ${i} of ${pageCount}`, 195, 290, { align: 'right' })
  }

  // Save PDF
  const fileName = `VOXA-Analysis-${userName.replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.pdf`
  doc.save(fileName)
}
